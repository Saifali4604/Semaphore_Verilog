`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 02/27/2025 06:17:36 AM
// Design Name: 
// Module Name: crc_semaphore
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////

// CRC-8 Polynomial: x^8 + x^2 + x + 1
// Declare semaphore for mutual exclusion
// Acquire semaphore to use CRC function, Release semaphore

module crc_semaphore;
  parameter POLY = 8'h07; 
  semaphore sem; 
  bit [7:0] crc_value; 
  

  function automatic bit [7:0] compute_crc(input bit [7:0] data);
    bit [7:0] crc;
    bit [15:0] temp;
    int i;
    temp = {data, 8'b0};
    for (i = 0; i < 8; i++) begin
        temp = (temp[15]) ? (temp << 1) ^ (POLY << 8) : (temp << 1);
    end
    crc = (temp[15:8]);
    return crc;
  endfunction


  task automatic moduleA();
    bit [7:0] dataA = 8'h5A; 
    forever begin
      #($urandom_range(2, 10) * 1ns);
      sem.get(1);
      crc_value = compute_crc(dataA);
      $display("[%0t] Module A computed CRC: %h for data: %h", $time, crc_value, dataA);
      sem.put(1); 
    end
  endtask

  task automatic moduleB();
    bit [7:0] dataB = 8'hC3; 
    forever begin
      #($urandom_range(2, 10) * 1ns);
      sem.get(1);
      crc_value = compute_crc(dataB);
      $display("[%0t] Module B computed CRC: %h for data: %h", $time, crc_value, dataB);
      sem.put(1); 
    end
  endtask

  
  initial begin
    sem = new(1);
    
    fork
      moduleA();
      moduleB();
    join_none

    #60;
    $finish;
  end

endmodule

